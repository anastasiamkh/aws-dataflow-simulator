"""Configuration."""

import os

from pathlib import Path
import yaml

with open("dataflow_config.yaml", "r") as file:
    aws_config = yaml.safe_load(file)


def get_dataset_filepath(processed: bool = True) -> Path:
    if processed:
        return aws_config["dataset"]["filepath_processed"]
    else:
        return aws_config["dataset"]["filepath"]


def get_s3_bucket_name() -> str:
    """Get S3 bucket name to store the csv file."""
    bucket_name = aws_config["aws"]["s3_bucket_name"]
    if not bucket_name:
        raise KeyError("No value set for aws s3_bucket_name in dataflow_config.yaml")
    return bucket_name


def get_kinesis_stream_name() -> str:
    """Get Kinesis stream name."""

    # Get stream name from env variable set in Fargate container
    # it should match stream name generated by CDK during deploy
    stream_name = os.getenv("KINESIS_STREAM_NAME")
    if not stream_name:
        raise KeyError("KINESIS_STREAM_NAME not set in container.")
    return stream_name


def get_ecr_repo_name() -> str:
    ecr_repo_name = aws_config["aws"]["ecr_repo_name"]
    if not ecr_repo_name:
        raise KeyError(f"No value set for aws ecr_repo_name in dataflow_config.yaml")
    return ecr_repo_name


def get_kinesis_shard_count() -> int:
    """Get number of shards to create with kinesis stream."""
    kinesis_shard_count = aws_config["aws"]["kinesis_shard_count"]
    return kinesis_shard_count


def get_notifications_email() -> str:
    return aws_config["aws"]["notifications_email"]


def get_billing_alarm_threshold() -> int:
    """Get CloudWatch billing alarm threshold."""
    return aws_config["aws"]["cloudwatch_alarm_thresh"]


def get_apply_delay() -> bool:
    """Get Cif delay should be applied to streaming events."""
    return aws_config["dataset"]["apply_delay"]


def get_first_event_dt() -> str:
    """Get name of timestamp column for calculating delay between events ."""
    first_event_dt = aws_config["dataset"]["first_event_dt"]

    return first_event_dt


def get_delay_ms() -> int:
    """Get static delay in millisedonds."""
    delay_ms = aws_config["dataset"]["delay_ms"]

    # deafult value -1 refers to no static delay
    if delay_ms == -1:
        return None
    return delay_ms


def get_colname_dt() -> int:
    """Get name of timestamp column for calculating delay between events ."""
    colname_dt = aws_config["dataset"]["colname_dt"]

    # deafult value -1 refers to no static delay
    if colname_dt == "":
        return None
    return colname_dt
